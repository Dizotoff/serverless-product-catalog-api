# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: battlestar
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: serverless-product-catalog-api
# "service" is the name of this project. This will also be added to your AWS resource names.
service: serverless-product-catalog-api

stages:
  default:
    params:
      tableName: "users-table-${sls:stage}"

provider:
  name: aws
  runtime: nodejs20.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [UsersTable, Arn]
  environment:
    USERS_TABLE: ${self:custom.tableName.${opt:stage, 'dev'}}
    IS_OFFLINE: "${opt:stage, 'dev'}` == 'local' ? 'true' : 'false'"

functions:
  api:
    handler: handler.handler
    events:
      - httpApi: "*"

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${param:tableName}

plugins:
  - serverless-offline

custom:
  tableName:
    dev: users-table-dev # Table name for development (cloud)
    prod: users-table-prod # Table name for production (cloud)
    local: users-table-local # Table name for local development
