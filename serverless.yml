# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: battlestar
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: serverless-product-catalog-api
# "service" is the name of this project. This will also be added to your AWS resource names.
service: serverless-product-catalog-api

stages:
  default:
    params:
      tableName: "products-table-${sls:stage}"

provider:
  name: aws
  runtime: nodejs20.x
  environment:
    PRODUCTS_TABLE: ${self:custom.tableName.${opt:stage, 'dev'}}
    # ORDERS_TABLE: ${self:custom.ordersTableName.${opt:stage, 'dev'}}
    # ORDERS_TOPIC_ARN: !Ref OrdersTopic
    IS_OFFLINE: "${opt:stage, 'dev'}` == 'local' ? 'true' : 'false'"
    USER_POOL_ID: !Ref CognitoUserPool
    USER_POOL_CLIENT_ID: !Ref CognitoUserPoolClient

functions:
  getProductById:
    handler: src/handlers/product-handler.getProductById
    events:
      - http:
          path: products/{productId}
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer
          cors: true
    role: GetProductRole

  createProduct:
    handler: src/handlers/product-handler.createProduct
    events:
      - http:
          path: products
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer
          cors: true
    role: CreateProductRole

  updateProduct:
    handler: src/handlers/product-handler.updateProduct
    events:
      - http:
          path: products/{productId}
          method: put
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer
          cors: true
    role: UpdateProductRole

  deleteProduct:
    handler: src/handlers/product-handler.deleteProduct
    events:
      - http:
          path: products/{productId}
          method: delete
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer
          cors: true
    role: DeleteProductRole

  # createOrder:
  #   handler: src/handlers/order-handler.createOrder
  #   events:
  #     - http:
  #         path: orders
  #         method: post
  #         authorizer:
  #           type: COGNITO_USER_POOLS
  #           authorizerId: !Ref ApiGatewayAuthorizer
  #         cors: true
  #   role: OrdersRole

  # getOrdersByUser:
  #   handler: src/handlers/order-handler.getOrdersByUser
  #   events:
  #     - http:
  #         path: orders
  #         method: get
  #         authorizer:
  #           type: COGNITO_USER_POOLS
  #           authorizerId: !Ref ApiGatewayAuthorizer
  #         cors: true
  #   role: OrdersRole

  # updateOrderStatus:
  #   handler: src/handlers/order-handler.updateOrderStatus
  #   events:
  #     - http:
  #         path: orders/{orderId}/status
  #         method: put
  #         authorizer:
  #           type: COGNITO_USER_POOLS
  #           authorizerId: !Ref ApiGatewayAuthorizer
  #         cors: true
  #   role: OrdersRole

resources:
  Resources:
    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: productId
            AttributeType: S
        KeySchema:
          - AttributeName: productId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${param:tableName}

    GetProductRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: GetProductPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - Fn::GetAtt: [ProductsTable, Arn]
                    - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${self:service}-${opt:stage, 'dev'}-getProductById:*"

    CreateProductRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: CreateProductPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:PutItem
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - Fn::GetAtt: [ProductsTable, Arn]
                    - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${self:service}-${opt:stage, 'dev'}-createProduct:*"

    UpdateProductRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: UpdateProductPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:UpdateItem
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - Fn::GetAtt: [ProductsTable, Arn]
                    - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${self:service}-${opt:stage, 'dev'}-updateProduct:*"

    DeleteProductRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: DeleteProductPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:DeleteItem
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - Fn::GetAtt: [ProductsTable, Arn]
                    - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${self:service}-${opt:stage, 'dev'}-deleteProduct:*"

    # OrdersTable:
    #   Type: AWS::DynamoDB::Table
    #   Properties:
    #     AttributeDefinitions:
    #       - AttributeName: orderId
    #         AttributeType: S
    #       - AttributeName: userId
    #         AttributeType: S
    #     KeySchema:
    #       - AttributeName: orderId
    #         KeyType: HASH
    #     GlobalSecondaryIndexes:
    #       - IndexName: UserIdIndex
    #         KeySchema:
    #           - AttributeName: userId
    #             KeyType: HASH
    #         Projection:
    #           ProjectionType: ALL
    #     BillingMode: PAY_PER_REQUEST
    #     TableName: ${self:custom.ordersTableName.${opt:stage, 'dev'}}

    # OrdersTopic:
    #   Type: AWS::SNS::Topic
    #   Properties:
    #     TopicName: ${self:service}-orders-${opt:stage, 'dev'}

    # OrdersRole:
    #   Type: AWS::IAM::Role
    #   Properties:
    #     AssumeRolePolicyDocument:
    #       Version: "2012-10-17"
    #       Statement:
    #         - Effect: Allow
    #           Principal:
    #             Service: lambda.amazonaws.com
    #           Action: sts:AssumeRole
    #     Policies:
    #       - PolicyName: OrdersPolicy
    #         PolicyDocument:
    #           Version: "2012-10-17"
    #           Statement:
    #             - Effect: Allow
    #               Action:
    #                 - dynamodb:PutItem
    #                 - dynamodb:GetItem
    #                 - dynamodb:Query
    #                 - dynamodb:UpdateItem
    #                 - sns:Publish
    #                 - logs:CreateLogGroup
    #                 - logs:CreateLogStream
    #                 - logs:PutLogEvents
    #               Resource:
    #                 - !GetAtt OrdersTable.Arn
    #                 - !Sub "${OrdersTable.Arn}/index/*"
    #                 - !Ref OrdersTopic
    #                 - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${self:service}-${opt:stage, 'dev'}-*:*"

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-user-pool-${opt:stage, 'dev'}
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: true
        AutoVerifiedAttributes:
          - email
        Schema:
          - Name: email
            Required: true
            Mutable: true
            AttributeDataType: String
          - Name: custom:role
            Required: false
            Mutable: true
            AttributeDataType: String

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref CognitoUserPool
        ClientName: ${self:service}-user-pool-client-${opt:stage, 'dev'}
        GenerateSecret: false
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH

    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        Type: COGNITO_USER_POOLS
        IdentitySource: method.request.header.Authorization
        RestApiId: !Ref ApiGatewayRestApi
        ProviderARNs:
          - !GetAtt CognitoUserPool.Arn

plugins:
  - serverless-offline

custom:
  tableName:
    dev: products-table-dev # Table name for development (cloud)
    prod: products-table-prod # Table name for production (cloud)
    local: products-table-local # Table name for local development
  # ordersTableName:
  #   dev: orders-table-dev
  #   prod: orders-table-prod
  #   local: orders-table-local
