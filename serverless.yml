# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: battlestar
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: serverless-product-catalog-api
# "service" is the name of this project. This will also be added to your AWS resource names.
service: serverless-product-catalog-api

stages:
  default:
    params:
      tableName: "products-table-${sls:stage}"

provider:
  name: aws
  runtime: nodejs20.x
  environment:
    PRODUCTS_TABLE: ${self:custom.tableName.${opt:stage, 'dev'}}
    IS_OFFLINE: "${opt:stage, 'dev'}` == 'local' ? 'true' : 'false'"

functions:
  getProductById:
    handler: handler.getProductById
    events:
      - http:
          path: products/{productId}
          method: get
    role: GetProductRole

  createProduct:
    handler: handler.createProduct
    events:
      - http:
          path: products
          method: post
    role: CreateProductRole

  updateProduct:
    handler: handler.updateProduct
    events:
      - http:
          path: products/{productId}
          method: put
    role: UpdateProductRole

  deleteProduct:
    handler: handler.deleteProduct
    events:
      - http:
          path: products/{productId}
          method: delete
    role: DeleteProductRole

resources:
  Resources:
    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: productId
            AttributeType: S
        KeySchema:
          - AttributeName: productId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${param:tableName}

    GetProductRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: GetProductPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                  Resource:
                    - Fn::GetAtt: [ProductsTable, Arn]

    CreateProductRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: CreateProductPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:PutItem
                  Resource:
                    - Fn::GetAtt: [ProductsTable, Arn]

    UpdateProductRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: UpdateProductPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:UpdateItem
                  Resource:
                    - Fn::GetAtt: [ProductsTable, Arn]

    DeleteProductRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: DeleteProductPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:DeleteItem
                  Resource:
                    - Fn::GetAtt: [ProductsTable, Arn]

plugins:
  - serverless-offline

custom:
  tableName:
    dev: products-table-dev # Table name for development (cloud)
    prod: products-table-prod # Table name for production (cloud)
    local: products-table-local # Table name for local development
